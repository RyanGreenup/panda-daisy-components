#+title: Readme
#+OPTIONS: H:6
* Panda CSS Components Storybook
** Usage
*** Import the Preset
1. Add this to package.json

   - Local

     #+begin_src json
       "dependencies": {
         "@ryangreenup/panda-daisy-components": "file:../panda-storybook",
     #+end_src

   - Git

     #+begin_example

      "dependencies": {

     "@ryangreenup/panda-daisy-components": "github:RyanGreenup/panda-daisy-components/#main",
     #+end_example

2. Import the preset

   #+begin_example

   import { daisyLikePreset } from "@ryangreenup/panda-daisy-components/presets/daisy/daisy";
   #+end_example
*** Walkthrough
**** Create fresh project
#+begin_src sh
name="SOME_NAME"
npm init solid@latest -- -t basic --solidstart --ts -p "${name}"
cd "${name}"
bun install
git init
git add -A
git commit -m "initial commit"
#+end_src
**** Install Panda CSS
See [[the docs]], but broadly:

1. Install Panda

   #+begin_src sh
bun add -D @pandacss/dev
bun panda init --postcss
   #+end_src

2. Add panda codegen to the =package.json=, so it might look something like this:

   #+begin_src json
{
  "name": "example-basic",
  "type": "module",
  "scripts": {
    "prepare": "panda codegen",
    "prepare-clean": "panda codegen --clean",
    "dev": "vinxi dev",
    "build": "vinxi build",
    "start": "vinxi start",
    "version": "vinxi version"
  },
  "dependencies": {
    "@solidjs/meta": "^0.29.4",
    "@solidjs/router": "^0.15.0",
    "@solidjs/start": "^1.1.0",
    "solid-js": "^1.9.5",
    "vinxi": "^0.5.7"
  },
  "engines": {
    "node": ">=22"
  },
  "devDependencies": {
    "@pandacss/dev": "^1.2.0"
  }
}

   #+end_src

3. Overwrite the =app.css=
   #+begin_src
echo '@layer reset, base, tokens, recipes, utilities;' > src/app.css
   #+end_src
**** Install this library

1. Install the dependency
   #+begin_src sh
bun install "@ryangreenup/panda-daisy-components@github:RyanGreenup/panda-daisy-components/#main"
   #+end_src

2. Update the vite config so it does not optimize solid components into React:

   #+begin_src typescript
   optimizeDeps: {
     exclude: [
         '@ryangreenup/panda-daisy-components',
     ],
   },
   #+end_src
   For Solid Start, which uses Vinxi, this would be the `app.config.ts`, here's a full example:

   #+begin_src typescript
import { defineConfig } from "@solidjs/start/config";
/* @ts-ignore */
import pkg from "@vinxi/plugin-mdx";

const { default: mdx } = pkg;
export default defineConfig({
    extensions: ["mdx", "md"],
    vite: {
    optimizeDeps: {
        exclude: ["@ryangreenup/panda-daisy-components"],
    },
    plugins: [
        mdx.withImports({})({
        jsx: true,
        jsxImportSource: "solid-js",
        providerImportSource: "solid-mdx",
        }),
    ],
    },
});
   #+end_src
3. Update the =panda.config.ts= to scan the appropriate files and import the preset, it may look something like this:
   #+begin_src typescript
import { defineConfig } from "@pandacss/dev";
import pandaPreset from "@pandacss/preset-panda";
import { DaisyPreset } from "@ryangreenup/panda-daisy-components/presets/daisy/daisy";
import layoutPreset from "@ryangreenup/panda-daisy-components/presets/layout/layout";

export default defineConfig({
    // Whether to use css reset
    preflight: true,

    // Where to look for your css declarations
    jsxFramework: "solid",

    include: [
        "./src/**/*.{js,jsx,ts,tsx}",
        "./pages/**/*.{js,jsx,ts,tsx}",
        "./src/**/*.mdx",
        "./pages/**/*.mdx",

        // If installed as a node module
        "./node_modules/@ryangreenup/panda-daisy-components/stories/**/*.{js,tsx,ts,tsx,mdx}",
        "./node_modules/@ryangreenup/panda-daisy-components/src/**/*.{js,tsx,ts,tsx,mdx}",

        // If using filepaths
        // "../panda-storybook/stories/**/*.{js,tsx,ts,tsx,mdx}",
        // "../panda-storybook/src/**/*.{js,tsx,ts,tsx,mdx}",
    ],

    presets: [pandaPreset, DaisyPreset, layoutPreset],

    // The output directory for your css system
    outdir: "styled-system",
});
   #+end_src
4. Install the peer dependencies (be sure to check the =package.json= to be sure)
   #+begin_src sh
   bun install "@kobalte/core" "solid-js" "@tanstack/solid-virtual" "lucide-solid" "solid-transition-group" "@tanstack/solid-table"
   #+end_src
5. Create a route with a component, e.g. =src/routes/index.tsx=:
   #+begin_src typescript
import { Button } from "@ryangreenup/panda-daisy-components";
import { css } from "../../styled-system/css";

export default function Home() {
  return (
    <div
      class={css({
        display: "flex",
        justifyContent: "center",
        alignItems: "center",
        height: "100dvh",
        bg: "base.100",
      })}
    >
      <Button variant="primary">Hello World!</Button>
    </div>
  );
}
   #+end_src
6. Implement the default layout.
   1. Move the Index:
      #+begin_src sh
touch "src/routes/(app).tsx"
mkdir "src/routes/(app)/"
mv src/routes/index.tsx "src/routes/(app)"
      #+end_src
   2. Implement the layout group in =src/routes/(app).tsx
      #+begin_src html
import {
  BtmDashContainer,
  BtmDashStyled,
  BtmDrawerToggleStyled,
  DrawerToggleStyled,
  HamburgerIcon,
  LayoutContainer,
  Main,
  MainArea,
  NavbarContent,
  NavbarEnd,
  NavbarStart,
  NavbarToggleStyled,
  RightDrawerToggleStyled,
  BtmDrawerStyled,
  NavbarStyled,
  RightDrawerStyled,
  SidebarStyled,
  Button,
} from "@ryangreenup/panda-daisy-components";

import { circle } from "../../styled-system/patterns";
import { css } from "../../styled-system/css";
// @ts-ignore
import Menu from "lucide-solid/icons/menu";
// @ts-ignore
import PanelBottom from "lucide-solid/icons/panel-bottom";
// @ts-ignore
import PanelLeft from "lucide-solid/icons/panel-left";
// @ts-ignore
import PanelRight from "lucide-solid/icons/panel-right";
import { For, JSXElement } from "solid-js";

export default function Layout(props: { children: JSXElement }) {
  return (
    <LayoutContainer>
      <NavbarStyled>
        <NavbarContent>
          <NavbarStart>
            <HamburgerIcon name="drawer" />
          </NavbarStart>
          <NavbarContent>
            <BtmDashContainer>
              <ToggleButtons />
            </BtmDashContainer>
          </NavbarContent>
          <NavbarEnd>
            <div
              class={circle({
                w: "8",
                h: "8",
                bgGradient: "to-r",
                gradientFrom: "primary",
                gradientTo: "secondary",
              })}
            ></div>
          </NavbarEnd>
        </NavbarContent>
      </NavbarStyled>
      <MainArea>
        <SidebarStyled>
          <SidebarContainer>
            <SidebarPlaceHolder />
          </SidebarContainer>
        </SidebarStyled>
        <Main>{props.children}</Main>
        {/* NOTE RightSidebar may be renamed as RightDrawer */}
        <RightDrawerStyled>
          <SidebarContainer>
            <SidebarPlaceHolder />
          </SidebarContainer>
        </RightDrawerStyled>
        <BtmDrawerStyled>
          <BottomDrawerContent />
        </BtmDrawerStyled>
      </MainArea>
      <BtmDashStyled>
        <BtmDashContainer>
          <ToggleButtons />
        </BtmDashContainer>
      </BtmDashStyled>
    </LayoutContainer>
  );
}

const BottomDrawerContent = () => (
  <div
    class={css({
      display: "flex",
      justifyContent: "center",
      alignItems: "center",
      height: "full",
      p: 10,
    })}
  >
    <div
      class={css({
        display: "flex",
        justifyContent: "center",
        alignItems: "center",
        bg: "base.200",
        border: "box",
        shadow: "box",
        rounded: "box",
        py: 10,
        width: "20rem",

        transition: "all 0.3s ease",
        _hover: {
          bg: "primary/50",
          rotate: "3deg",
          transform: "scale(1.2)",
        },
      })}
    >
      Bottom Drawer
    </div>
  </div>
);

const SidebarContainer = (props: { children: JSXElement }) => {
  return (
    <div
      class={css({
        p: "4",
        display: "flex",
        flexDirection: "column",
        gap: "3",
        height: "100%",
        overflow: "auto",
      })}
    >
      {props.children}
    </div>
  );
};

const SidebarPlaceHolder = () => {
  return (
    <For
      each={Array.from({ length: 100 }, (_, i) => i)}
      fallback={<div>No items</div>}
    >
      {(item, index) => (
        <Button variant="primary" data-index={index()}>
          {item}
        </Button>
      )}
    </For>
  );
};

const ToggleButtons = () => {
  return (
    <>
      <DrawerToggleStyled>
        <Menu size={20} />
        <span>Sidebar</span>
      </DrawerToggleStyled>

      <NavbarToggleStyled>
        <PanelLeft size={20} />
        <span>Navbar</span>
      </NavbarToggleStyled>

      <RightDrawerToggleStyled>
        <PanelRight size={20} />
        <span>Right</span>
      </RightDrawerToggleStyled>

      <BtmDrawerToggleStyled>
        <PanelBottom size={20} />
        <span>Bottom</span>
      </BtmDrawerToggleStyled>
    </>
  );
};
      #+end_src
